@model StudentApp.Models.ViewModels.OgrencilerFilterViewModel

@{
    ViewData["Title"] = "Öğrenciler";
    
    // Helper method for building sort links with all filter parameters
    string BuildSortLink(string sortBy, string sortOrder)
    {
 var url = Url.Action("Index", new {
      SortBy = sortBy,
      SortOrder = sortOrder,
  SearchTerm = Model.SearchTerm,
         CinsiyetId = Model.CinsiyetId,
        OdemePlanlariId = Model.OdemePlanlariId,
            MinYas = Model.MinYas,
            MaxYas = Model.MaxYas,
          BaslangicKayitTarihi = Model.BaslangicKayitTarihi?.ToString("yyyy-MM-dd"),
          BitisKayitTarihi = Model.BitisKayitTarihi?.ToString("yyyy-MM-dd"),
            ShowPasif = Model.ShowPasif
        });
        return url ?? "#";
 }
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-users me-2"></i>Öğrenciler</h2>
    <div>
        <div class="form-check form-switch d-inline-block me-3">
<input class="form-check-input" type="checkbox" id="showPasifSwitch" 
                @(Model.ShowPasif ? "checked" : "")
         onchange="togglePasif(this.checked)">
            <label class="form-check-label" for="showPasifSwitch">
  <i class="fas fa-eye-slash me-1"></i>Pasif Kayıtları Göster
</label>
        </div>
        <a asp-action="Create" class="btn btn-primary">
  <i class="fas fa-plus me-1"></i>Yeni Öğrenci Ekle
        </a>
    </div>
</div>

<script>
function togglePasif(showPasif) {
    const url = new URL(window.location);
    url.searchParams.set('ShowPasif', showPasif);
    window.location.href = url.toString();
}
</script>

<!-- Filtreleme Paneli -->
<div class="card mb-4">
  <div class="card-header">
        <h5 class="mb-0">
       <i class="fas fa-filter me-2"></i>Filtreleme ve Arama
      <button class="btn btn-sm btn-outline-secondary float-end" type="button" data-bs-toggle="collapse" data-bs-target="#filterPanel">
       <i class="fas fa-chevron-down"></i>
     </button>
        </h5>
 </div>
    <div class="collapse" id="filterPanel">
     <div class="card-body">
      <form asp-action="Index" method="get" id="filterForm">
     <div class="row g-3">
      <!-- Arama -->
     <div class="col-md-4">
         <label class="form-label">
       <i class="fas fa-search me-1"></i>Ara (Ad, Soyad, Email)
       </label>
      <input type="text" name="SearchTerm" value="@Model.SearchTerm" class="form-control" placeholder="Arama kelimesi..." />
    </div>

       <!-- Cinsiyet Filtresi -->
       <div class="col-md-2">
      <label class="form-label">
<i class="fas fa-venus-mars me-1"></i>Cinsiyet
</label>
  <select name="CinsiyetId" class="form-select filter-auto">
       <option value="">Tümü</option>
   @foreach (var cinsiyet in Model.Cinsiyetler ?? Enumerable.Empty<StudentApp.Models.Cinsiyetler>())
        {
     <option value="@cinsiyet.Id" selected="@(Model.CinsiyetId == cinsiyet.Id)">@cinsiyet.Cinsiyet</option>
  }
     </select>
</div>

    <!-- Ödeme Planı Filtresi -->
       <div class="col-md-3">
     <label class="form-label">
      <i class="fas fa-calendar-alt me-1"></i>Ödeme Planı
</label>
      <select name="OdemePlanlariId" class="form-select filter-auto">
  <option value="">Tümü</option>
    @foreach (var plan in Model.OdemePlanlari ?? Enumerable.Empty<StudentApp.Models.OdemePlanlari>())
         {
   <option value="@plan.Id" selected="@(Model.OdemePlanlariId == plan.Id)">@plan.KursProgrami</option>
           }
       </select>
    </div>

    <!-- Yaş Filtresi -->
     <div class="col-md-3">
    <label class="form-label">
        <i class="fas fa-birthday-cake me-1"></i>Yaş Aralığı
   </label>
<div class="input-group">
     <input type="number" name="MinYas" value="@Model.MinYas" class="form-control filter-auto" placeholder="Min" min="0" max="120" />
    <span class="input-group-text">-</span>
     <input type="number" name="MaxYas" value="@Model.MaxYas" class="form-control filter-auto" placeholder="Max" min="0" max="120" />
</div>
  </div>

                <!-- Kayıt Tarihi Filtresi -->
  <div class="col-md-6">
        <label class="form-label">
      <i class="fas fa-calendar-plus me-1"></i>Kayıt Tarihi Aralığı
        </label>
        <div class="input-group">
     <input type="date" name="BaslangicKayitTarihi" value="@Model.BaslangicKayitTarihi?.ToString("yyyy-MM-dd")" class="form-control filter-auto" />
     <span class="input-group-text">-</span>
            <input type="date" name="BitisKayitTarihi" value="@Model.BitisKayitTarihi?.ToString("yyyy-MM-dd")" class="form-control filter-auto" />
         </div>
         <small class="form-text text-muted">Belirtilen tarih aralığındaki kayıtları filtreler</small>
     </div>

  <!-- Sıralama -->
 <div class="col-md-6">
    <label class="form-label">
     <i class="fas fa-sort me-1"></i>Sırala
     </label>
   <div class="input-group">
     <select name="SortBy" class="form-select filter-auto">
  <option value="OgrenciSoyadi" selected="@(Model.SortBy == "OgrenciSoyadi")">Soyad</option>
        <option value="OgrenciAdi" selected="@(Model.SortBy == "OgrenciAdi")">Ad</option>
    <option value="Email" selected="@(Model.SortBy == "Email")">Email</option>
     <option value="DogumTarihi" selected="@(Model.SortBy == "DogumTarihi")">Doğum Tarihi</option>
  <option value="KayitTarihi" selected="@(Model.SortBy == "KayitTarihi")">Kayıt Tarihi</option>
 </select>
   <select name="SortOrder" class="form-select filter-auto" style="max-width: 150px;">
  <option value="asc" selected="@(Model.SortOrder == "asc")">Artan</option>
       <option value="desc" selected="@(Model.SortOrder == "desc")">Azalan</option>
    </select>
   </div>
      </div>

     <!-- Butonlar -->
      <div class="col-md-6 d-flex align-items-end">
     <button type="submit" class="btn btn-primary me-2">
  <i class="fas fa-search me-1"></i>Filtrele
      </button>
        <a asp-action="Index" class="btn btn-secondary">
  <i class="fas fa-redo me-1"></i>Temizle
       </a>
  </div>
 </div>
 <input type="hidden" name="SortBy" value="@Model.SortBy" />
       <input type="hidden" name="SortOrder" value="@Model.SortOrder" />
       <input type="hidden" name="ShowPasif" value="@Model.ShowPasif" />
        <input type="hidden" name="BaslangicKayitTarihi" value="@Model.BaslangicKayitTarihi?.ToString("yyyy-MM-dd")" />
  <input type="hidden" name="BitisKayitTarihi" value="@Model.BitisKayitTarihi?.ToString("yyyy-MM-dd")" />
  </form>
    </div>
    </div>
</div>

<script>
  (function () {
    var form = document.getElementById('filterForm');
    if (!form) return;
    var autos = form.querySelectorAll('.filter-auto');
    autos.forEach(function (el) {
      el.addEventListener('change', function () {
        form.requestSubmit ? form.requestSubmit() : form.submit();
      });
    });
    var search = form.querySelector('input[name="SearchTerm"]');
    if (search) {
      var timer;
      search.addEventListener('input', function () {
        clearTimeout(timer);
        timer = setTimeout(function () {
          form.requestSubmit ? form.requestSubmit() : form.submit();
        }, 500);
      });
    }
  })();
</script>

@if (Model.Ogrenciler.Any())
{
    <div class="alert alert-info">
  <i class="fas fa-info-circle me-1"></i>
        @if (Model.ShowPasif)
        {
     <span>Toplam <strong>@Model.Ogrenciler.Count()</strong> öğrenci bulundu (aktif ve pasif kayıtlar dahil).</span>
        }
        else
        {
       <span>Toplam <strong>@Model.Ogrenciler.Count()</strong> aktif öğrenci bulundu.</span>
        }
    </div>

    <form asp-action="SendSmsSelected" method="post" id="sendSmsForm">
    @Html.AntiForgeryToken()
    <div class="d-flex justify-content-between mb-2">
        <div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="selectAllChk" />
                <label class="form-check-label" for="selectAllChk">Tümünü Seç</label>
            </div>
        </div>
        <div class="btn-group">
            <button type="submit" class="btn btn-sm btn-success">
                <i class="fas fa-paper-plane me-1"></i>Seçilenlere SMS Gönder
            </button>
            <button type="button" id="exportExcelBtn" class="btn btn-sm btn-outline-primary">
                <i class="fas fa-file-excel me-1"></i>Excel'e Aktar
            </button>
            <button type="button" id="exportPdfBtn" class="btn btn-sm btn-outline-danger">
                <i class="fas fa-file-pdf me-1"></i>PDF'e Aktar
            </button>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="ogrencilerTable">
     <thead>
       <tr>
     <th style="width:36px;"></th>
     <th>
            <a href="@BuildSortLink("OgrenciAdi", Model.SortBy == "OgrenciAdi" && Model.SortOrder == "asc" ? "desc" : "asc")" 
       class="text-decoration-none text-dark">
    Ad
   @if (Model.SortBy == "OgrenciAdi")
{
  <i class="fas fa-sort-@(Model.SortOrder == "asc" ? "up" : "down")"></i>
      }
   </a>
   </th>
    <th>
   <a href="@BuildSortLink("OgrenciSoyadi", Model.SortBy == "OgrenciSoyadi" && Model.SortOrder == "asc" ? "desc" : "asc")"
  class="text-decoration-none text-dark">
     Soyad
    @if (Model.SortBy == "OgrenciSoyadi")
  {
   <i class="fas fa-sort-@(Model.SortOrder == "asc" ? "up" : "down")"></i>
     }
    </a>
  </th>
      <th>
     <a href="@BuildSortLink("Email", Model.SortBy == "Email" && Model.SortOrder == "asc" ? "desc" : "asc")"
       class="text-decoration-none text-dark">
  Email
   @if (Model.SortBy == "Email")
   {
       <i class="fas fa-sort-@(Model.SortOrder == "asc" ? "up" : "down")"></i>
   }
   </a>
  </th>
   <th>Yaş</th>
      <th>Cinsiyet</th>
 <th>Ödeme Planı</th>
<th>Durum</th>
   <th>
 <a href="@BuildSortLink("KayitTarihi", Model.SortBy == "KayitTarihi" && Model.SortOrder == "asc" ? "desc" : "asc")"
    class="text-decoration-none text-dark">
  Kayıt Tarihi
 @if (Model.SortBy == "KayitTarihi")
     {
          <i class="fas fa-sort-@(Model.SortOrder == "asc" ? "up" : "down")"></i>
      }
 </a>
 </th>
    <th class="text-center">İşlemler</th>
   </tr>
  </thead>
   <tbody>
  @foreach (var item in Model.Ogrenciler)
         {
     var yas = DateTime.Now.Year - item.DogumTarihi.Year;
      if (DateTime.Now.DayOfYear < item.DogumTarihi.DayOfYear)
    {
    yas--;
   }
      
    <tr class="@(!item.Aktif ? "table-secondary" : "")">
      <td>
        <input class="form-check-input row-select" type="checkbox" name="selectedIds" value="@item.Id" />
      </td>
      <td>@item.OgrenciAdi</td>
   <td>@item.OgrenciSoyadi</td>
        <td>
  <a href="mailto:@item.Email" class="text-decoration-none">
       <i class="fas fa-envelope me-1"></i>@item.Email
          </a>
       </td>
      <td>
   <span class="badge bg-info">@yas yaşında</span>
        </td>
       <td>
     @if (item.Cinsiyet != null)
     {
   <i class="fas @(item.Cinsiyet.Cinsiyet == "Erkek" ? "fa-mars text-primary" : item.Cinsiyet.Cinsiyet == "Kadın" ? "fa-venus text-danger" : "fa-genderless text-secondary") me-1"></i>
 @item.Cinsiyet.Cinsiyet
    }
      else
    {
      <span class="text-muted">-</span>
        }
    </td>
 <td>
  @if (item.OdemePlanlari != null)
   {
  <span class="badge bg-success">
        <i class="fas fa-calendar-alt me-1"></i>@item.OdemePlanlari.KursProgrami
  </span>
      }
        else
{
   <span class="text-muted">-</span>
    }
    </td>
     <td>
     @if (item.Aktif)
     {
   <span class="badge bg-success">
        <i class="fas fa-check me-1"></i>Aktif
  </span>
      }
        else
{
   <span class="badge bg-secondary">
        <i class="fas fa-times me-1"></i>Pasif
    </span>
    }
    </td>
<td>@item.KayitTarihi.ToString("dd.MM.yyyy")</td>
<td class="text-center">
        <div class="btn-group" role="group">
       <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-info" title="Detayları Görüntüle">
   <i class="fas fa-eye"></i>
      </a>
 <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-warning" title="Düzenle">
      <i class="fas fa-edit"></i>
  </a>
    <a asp-controller="OgrenciOdemeTakvimi" asp-action="Create" asp-route-ogrenciId="@item.Id" class="btn btn-sm btn-outline-success" title="Ödeme Gir">
  <span style="font-family: Arial, sans-serif; font-weight: bold;">&#8378;</span>
  </a>
    @if (item.Aktif)
{
<form asp-action="ToggleAktif" method="post" class="d-inline">
<input type="hidden" name="id" value="@item.Id" />
<input type="hidden" name="aktif" value="false" />
<button type="submit" class="btn btn-sm btn-outline-secondary" title="Pasif Yap" onclick="return confirm('Bu öğrenciyi pasif yapmak istediğinizden emin misiniz?');">
<i class="fas fa-ban"></i>
</button>
</form>
}
else
{
<form asp-action="ToggleAktif" method="post" class="d-inline">
<input type="hidden" name="id" value="@item.Id" />
<input type="hidden" name="aktif" value="true" />
<button type="submit" class="btn btn-sm btn-outline-success" title="Aktif Yap" onclick="return confirm('Bu öğrenciyi aktif yapmak istediğinizden emin misiniz?');">
<i class="fas fa-check"></i>
</button>
</form>
}
<a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger" title="Sil">
<i class="fas fa-trash"></i>
</a>
</div>
</td>
  </tr>
   }
    </tbody>
        </table>
    </div>
    </form>
    <script>
        const selectAll = document.getElementById('selectAllChk');
        if (selectAll) {
            selectAll.addEventListener('change', function() {
                document.querySelectorAll('#ogrencilerTable .row-select').forEach(cb => { cb.checked = selectAll.checked; });
            });
        }

        const form = document.getElementById('sendSmsForm');
        if (form) {
            form.addEventListener('submit', async function (e) {
                e.preventDefault();
                const token = form.querySelector('input[name="__RequestVerificationToken"]').value;
                const selected = Array.from(document.querySelectorAll('#ogrencilerTable .row-select:checked'))
                    .map(cb => cb.value);
                if (selected.length === 0) {
                    alert('SMS göndermek için en az bir öğrenci seçiniz.');
                    return;
                }

                const params = new URLSearchParams();
                selected.forEach(id => params.append('selectedIds', id));

                const resp = await fetch('@Url.Action("SendSmsSelected","Ogrenciler")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        'RequestVerificationToken': token
                    },
                    body: params.toString()
                });

                try {
                    const data = await resp.json();
                    alert(data.message || (data.success ? 'İşlem tamamlandı' : 'İşlem başarısız'));
                    if (data.success) {
                        // Başarılı ise sayfayı yenileyerek SonSmsTarihi gibi alanları güncel gösterelim
                        location.reload();
                    }
                } catch {
                    alert('Beklenmeyen bir hata oluştu.');
                }
            });
        }

        async function postAndDownload(url, selected) {
            const token = document.querySelector('#sendSmsForm input[name="__RequestVerificationToken"]').value;
            const params = new URLSearchParams();
            selected.forEach(id => params.append('selectedIds', id));
            const resp = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'RequestVerificationToken': token
                },
                body: params.toString()
            });
            if (!resp.ok) {
                alert('Dışa aktarma sırasında hata oluştu.');
                return;
            }
            const blob = await resp.blob();
            const cd = resp.headers.get('Content-Disposition') || '';
            let filename = 'export';
            const match = cd.match(/filename="?([^";]+)"?/i);
            if (match && match[1]) filename = match[1];
            const urlObj = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = urlObj;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            a.remove();
            URL.revokeObjectURL(urlObj);
        }

        const excelBtn = document.getElementById('exportExcelBtn');
        const pdfBtn = document.getElementById('exportPdfBtn');
        function getSelectedIds() {
            return Array.from(document.querySelectorAll('#ogrencilerTable .row-select:checked')).map(cb => cb.value);
        }
        if (excelBtn) {
            excelBtn.addEventListener('click', async () => {
                const selected = getSelectedIds();
                if (selected.length === 0) { alert('Lütfen en az bir öğrenci seçiniz.'); return; }
                await postAndDownload('@Url.Action("ExportSelectedToExcel","Ogrenciler")', selected);
            });
        }
        if (pdfBtn) {
            pdfBtn.addEventListener('click', async () => {
                const selected = getSelectedIds();
                if (selected.length === 0) { alert('Lütfen en az bir öğrenci seçiniz.'); return; }
                await postAndDownload('@Url.Action("ExportSelectedToPdf","Ogrenciler")', selected);
            });
        }
    </script>
}
else
{
    <div class="text-center py-5">
  <i class="fas fa-user-graduate fa-3x text-muted mb-3"></i>
 <h4 class="text-muted">
      @if (!string.IsNullOrWhiteSpace(Model.SearchTerm) || Model.CinsiyetId.HasValue || Model.OdemePlanlariId.HasValue || Model.MinYas.HasValue || Model.MaxYas.HasValue || Model.BaslangicKayitTarihi.HasValue || Model.BitisKayitTarihi.HasValue)
   {
         <span>Filtreye uygun öğrenci bulunamadı</span>
 }
       else
   {
      <span>Öğrenci bulunamadı</span>
 }
      </h4>
  <p class="text-muted">
       @if (!string.IsNullOrWhiteSpace(Model.SearchTerm) || Model.CinsiyetId.HasValue || Model.OdemePlanlariId.HasValue || Model.MinYas.HasValue || Model.MaxYas.HasValue || Model.BaslangicKayitTarihi.HasValue || Model.BitisKayitTarihi.HasValue)
   {
      <span>Farklı filtre kriterleri deneyin veya filtreleri temizleyin.</span>
    }
      else
   {
   <span>İlk öğrencinizi ekleyerek başlayın.</span>
       }
   </p>
        <a asp-action="Index" class="btn btn-secondary me-2">
 <i class="fas fa-redo me-1"></i>Filtreleri Temizle
  </a>
  <a asp-action="Create" class="btn btn-primary">
      <i class="fas fa-plus me-1"></i>İlk Öğrenciyi Ekle
 </a>
    </div>
}
